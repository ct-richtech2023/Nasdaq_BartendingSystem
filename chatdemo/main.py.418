#!/usr/bin/env python

# Copyright 2017 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Google Cloud Speech API sample application using the streaming API.

NOTE: This module requires the additional dependency `pyaudio`. To install
using pip:

    pip install pyaudio

Example usage:
    python transcribe_streaming_mic.py
"""

# [START speech_transcribe_streaming_mic]
from __future__ import division

import argparse
import json
import os
import re
import struct
import sys
import time
import uuid

import openai
import pvporcupine
import requests
from google.cloud import speech

import pyaudio
from six.moves import queue

from dialogflow import DialogFlow
from gtts import GTTS

# Audio recording parameters
RATE = 48000
#CHUNK = int(RATE / 10)  # 100ms
CHUNK = 512 * 3  # 100ms
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "careful.json"
credential_path = "./adamtts-360502-dd4287183c47.json"
os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = credential_path
flag = 1


class MicrophoneStream(object):
    """Opens a recording stream as a generator yielding the audio chunks."""

    def __init__(self, rate, chunk):
        self._rate = rate
        self._chunk = chunk

        # Create a thread-safe buffer of audio data
        self._buff = queue.Queue()
        self.closed = True

    def __enter__(self):
        self._audio_interface = pyaudio.PyAudio()
        info = self._audio_interface.get_host_api_info_by_index(0)
        numdevices = info.get('deviceCount')
        for i in range(0, numdevices):
            if (self._audio_interface.get_device_info_by_host_api_device_index(0, i).get('maxInputChannels')) > 0:
                print("Input Device id ", i, " - ", self._audio_interface.get_device_info_by_host_api_device_index(0, i).get('name'))
        self._audio_stream = self._audio_interface.open(
            input_device_index=6,
            format=pyaudio.paInt16,
            # The API currently only supports 1-channel (mono) audio
            # https://goo.gl/z757pE
            channels=1,
            rate=self._rate,
            input=True,
            frames_per_buffer=self._chunk,
            # Run the audio stream asynchronously to fill the buffer object.
            # This is necessary so that the input device's buffer doesn't
            # overflow while the calling thread makes network requests, etc.
            stream_callback=self._fill_buffer,
        )

        self.closed = False

        return self

    def __exit__(self, type, value, traceback):
        self._audio_stream.stop_stream()
        self._audio_stream.close()
        self.closed = True
        # Signal the generator to terminate so that the client's
        # streaming_recognize method will not block the process termination.
        self._buff.put(None)
        self._audio_interface.terminate()

    def _fill_buffer(self, in_data, frame_count, time_info, status_flags):
        """Continuously collect data from the audio stream, into the buffer."""
        if not self.closed:
            # print(frame_count, self._buff.qsize())
            self._buff.put(in_data)
        return None, pyaudio.paContinue
        # return None, pyaudio.paComplete

    def pause(self):
        self.closed = True
        while not self._buff.empty():
            self._buff.get(block=False)
        print('empty buff')

    def proceed(self):
        self.closed = False

    def wake_generator(self):
        while not self.closed:
            chunk = self._buff.get()
            # chunk = self._audio_stream.read(512 * 3)
            data = [0] * 512
            data = list(struct.unpack('h' * 512 * 3, chunk))[0::3]
            # while data is not :
            #     data = list(struct.unpack('h' * int(len(chunk) / 2), chunk))
            # return data
            yield data

    def generator(self):
        while not self.closed:
            # Use a blocking get() to ensure there's at least one chunk of
            # data, and stop iteration if the chunk is None, indicating the
            # end of the audio stream.
            chunk = self._buff.get()
            if chunk is None:
                print('none1')
                return
            data = [chunk]

            # Now consume whatever other data's still buffered.
            while True:
                try:
                    chunk = self._buff.get(block=False)
                    if chunk is None:
                        return
                    data.append(chunk)
                except queue.Empty:
                    break
            yield b"".join(data)


def listen_print_loop(responses):
    """Iterates through server responses and prints them.

    The responses passed is a generator that will block until a response
    is provided by the server.

    Each response may contain multiple results, and each result may contain
    multiple alternatives; for details, see https://goo.gl/tjCPAU.  Here we
    print only the transcription for the top alternative of the top result.

    In this case, responses are provided for interim results as well. If the
    response is an interim one, print a line feed at the end of it, to allow
    the next result to overwrite it, until the response is a final one. For the
    final one, print a newline to preserve the finalized transcription.
    """
    num_chars_printed = 0
    for response in responses:
        # print('response ', response)
        if not response.results:
            continue

        # The `results` list is consecutive. For streaming, we only care about
        # the first result being considered, since once it's `is_final`, it
        # moves on to considering the next utterance.
        result = response.results[0]
        if not result.alternatives:
            continue

        # Display the transcription of the top alternative.
        transcript = result.alternatives[0].transcript

        # Display interim results, but with a carriage return at the end of the
        # line, so subsequent lines will overwrite them.
        #
        # If the previous result was longer than this one, we need to print
        # some extra spaces to overwrite the previous result
        overwrite_chars = " " * (num_chars_printed - len(transcript))
        if not result.is_final:
            # print("11")
            # print(transcript + overwrite_chars + "\r")
            sys.stdout.write(transcript + overwrite_chars + "\r")
            sys.stdout.flush()

            num_chars_printed = len(transcript)

        else:
            # print("result_speechtotext==", transcript + overwrite_chars)
            return transcript + overwrite_chars
            # Exit recognition if any of the transcribed phrases could be
            # one of our keywords.
            # if re.search(r"\b(exit|quit)\b", transcript, re.I):
            #     print("Exiting..")
            #     break
            #
            # num_chars_printed = 0
            # yield



def speechtotext(choice):
    # See http://g.co/cloud/speech/docs/languages
    # for a list of supported languages.
    language_code = "en-US"  # a BCP-47 language tag

    client = speech.SpeechClient()
    config = speech.RecognitionConfig(
        encoding=speech.RecognitionConfig.AudioEncoding.LINEAR16,
        sample_rate_hertz=RATE,
        language_code=language_code,
    )

    # streaming_config = speech.StreamingRecognitionConfig(
    #     config=config, interim_results=True
    # )

    gt = GTTS('response.mp3')
    re_tests = ['Good morning, how are you?',
                'how old are you',
                'can you chat with me?',
                '1+1=?',
                'how can you chat smarter?']
    openai.api_key = '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'

    porcupine = pvporcupine.create(
        access_key='i/qSJyQsdRUWTUGJg1S2uTHKC9U7AU1GxvQZo7Oc2hn6DJ39teyrWA==',
        library_path=pvporcupine.LIBRARY_PATH,
        model_path=pvporcupine.MODEL_PATH,
        keyword_paths=['Hi-adam_en_linux_v2_1_0.ppn'],
        sensitivities=[0.5])

    PROJECT_ID = 'adamtts-360502'
    # PROJECT_ID = 'applied-pursuit-352501'
    session_id = str(uuid.uuid4())
    AUDIO_PATH = 'hi.mp3'

    dia = DialogFlow(PROJECT_ID, AUDIO_PATH)
    with MicrophoneStream(RATE, CHUNK) as stream:
        streaming_config = speech.StreamingRecognitionConfig(
            config=config, interim_results=True
        )
        wake_generator = stream.wake_generator()
        waked = False
        while True:
            # stream.proceed()
            #while not waked:
            #    # print('22')
            #    pcm = next(wake_generator)
            #    # print(pcm)
            #    result = porcupine.process(pcm)
            #    # print(result)
            #    if result >= 0:
            #        print('Waked up!')
            #        waked = True
            #        break
            print('start ...')
            audio_generator = stream.generator()


            ttsrequests = (
                speech.StreamingRecognizeRequest(audio_content=content) for content in audio_generator
            )
            # print('debug: ttsrequests ')
            ttsresponse = client.streaming_recognize(streaming_config, ttsrequests)
            # print('debug: ttsresponse ')
            # Now, put the transcription responses to use.
            text = listen_print_loop(ttsresponse)
            print('you said [{}]'.format(text))
            # stream.pause()
            stream._audio_stream.stop_stream()


            dialog_response = dia.detect_intent_text(text)
            if dialog_response != 'pass':
                print('dialog response = [{}]'.format(dialog_response))
                gt.generate_mp3(dialog_response)
                gt.play_voice()
            else:
                del audio_generator
                del ttsrequests
                del ttsresponse
                if str(choice) == '1':
                    gpt_response = openai.ChatCompletion.create(model="gpt-3.5-turbo",
                                                                messages=[
                                                                    {"role": "system",
                                                                     "content": "You are a robot designed by Richtech Corporation, and your name is Adam. You are in charge of making coffee and boba milk tea and communicating with customers. You are very humorous. The coffee you can make includes: Cappuccino, Lattee, Americano, and the boba milk tea you can make: Hong Kong Style Milk Tea, Taro Milk Tea, Cold Brew Coffee, etc. You can let customers see the menu in the store for details."},
                                                                    {"role": "user", "content": text.strip()},
                                                                    ],
                                                                temperature=1.5,
                                                                max_tokens=100
                                                                )
                    response_text = gpt_response['choices'][0]['message']['content']
                    print('gpt response = [{}]'.format(response_text))
                    gt.generate_mp3(response_text)

                    gt.play_voice()
                elif str(choice) == '2':
                    gpt_response = openai.ChatCompletion.create(
                        model="gpt-3.5-turbo",
                        # model="gpt-4-0314",
                        messages=[
                            {"role": "user", "content": text},
                        ],
                        temperature=1.5,
                        max_tokens=50
                    )
                    response_text = gpt_response['choices'][0]['message']['content']
                    print('gpt response = [{}]'.format(response_text))
                    gt.generate_mp3(response_text)

                    gt.play_voice()
                else:
                    gpt_response = openai.Completion.create(model="text-davinci-003", prompt=text.strip(), temperature=0.5,
                                                            max_tokens=50)
                    print('gpt response = [{}]'.format(gpt_response.choices[0].text.strip()))
                    gt.generate_mp3(gpt_response.choices[0].text.strip())

                    gt.play_voice()
            stream._audio_stream.start_stream()
                # print('got text ',text)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='语音对话脚本')
    parser.add_argument(
        "--choice", help="1: dialog interface with setting roles for chatgpt 2:  dialog interface wighout setting roles; "
                         "3: normal interface", required=True, default='1'
    )
    args = parser.parse_args()

    speechtotext(args.choice)
    # gt = GTTS('response.mp3')
    # gt.generate_mp3('hey adam')
    # gt.play_voice()
    # p = pyaudio.PyAudio()
    # print(p.get_device_info_by_index(1))
    # for i in range(p.get_device_count()):
    #     print(i, p.get_device_info_by_index(i))
    # openai.api_key = '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'
    # for test in re_tests:
    #     print('request ==> {}'.format(test))
    #
    #     # Load your API key from an environment variable or secret management service
    #
    #
    #     response = openai.Completion.create(model="text-davinci-003", prompt=test, temperature=0.5,
    #                                         max_tokens=20)
    #     # result = openai_create(test)
    #     print('  result ==> {}'.format(response.choices[0].text))
# [END speech_transcribe_streaming_mic]


"""
0 HDA Intel PCH: ALC662 rev3 Analog (hw:0,0)
1 UACDemoV1.0: USB Audio (hw:1,0)
2 sysdefault
3 front
4 surround40
5 surround51
6 surround71
7 samplerate
8 speexrate
9 pulse
10 upmix
11 vdownmix
12 dmix
13 default

Process finished with exit code 0
"""

